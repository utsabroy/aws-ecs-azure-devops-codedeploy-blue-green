# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  - group: AWS
  - name: tag
    value: $(Build.SourceVersion)

stages:
- stage: Build
  displayName: Build & Deploy
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: build
        buildContext: '$(System.DefaultWorkingDirectory)'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        repository: $(AWS_ECR_IMAGE_URI)
        tags: $(tag)
    - task: ECRPushImage@1
      displayName: Push to ECR
      inputs:
        awsCredentials: 'AWS'
        regionName: $(AWS_REGION)
        imageSource: 'imagename'
        sourceImageName: $(AWS_ECR_IMAGE_URI)
        sourceImageTag: $(tag)
        pushTag:  $(tag)
        repositoryName: $(AWS_ECR_REPOSITORY_NAME)
    - task: Bash@3
      displayName: Update task definition & appspec
      inputs:
        targetType: inline
        script: |
          # Update Task Definition
          echo Update the REPOSITORY_URI:IMAGE_TAG in task definition...
          sed -i 's@REPOSITORY_URI@'$(AWS_ECR_IMAGE_URI)'@g' nginx-sample/taskdef.json
          sed -i 's@IMAGE_TAG@'$(tag)'@g' nginx-sample/taskdef.json
          sed -i 's@API_NAME@'$(AWS_SERVICE_NAME)'@g' nginx-sample/taskdef.json
          sed -i 's@AWS_REGION@'$(AWS_REGION)'@g' nginx-sample/taskdef.json
          sed -i 's@TASK_ROLE@'$(AWS_ECS_TASK_ROLE_ARN)'@g' nginx-sample/taskdef.json

          # Register Task Definition
          export TASK_DEFINITION_OUTPUT=$(aws ecs register-task-definition --family  nginx --cli-input-json file://nginx-sample/taskdef.json )
          echo "Task Definition Output =>" $TASK_DEFINITION_OUTPUT
          export TASK_DEFINITION_ARN=$(echo $TASK_DEFINITION_OUTPUT | jq -r '.taskDefinition.taskDefinitionArn')
          echo "Registered ECS Task Definition Arn: " $TASK_DEFINITION_ARN
          
          # Update AppSpec
          echo Updating appsec.yaml with Task Definition Arn: $TASK_DEFINITION_ARN
          sed -i 's@API_NAME@'$(AWS_SERVICE_NAME)'@g' nginx-sample/appspec.yaml
          sed -i 's@TASK_DEFINITION@'$TASK_DEFINITION_ARN'@g' nginx-sample/appspec.yaml
          
          # Update Create Deployment
          sed -i 's@BUILD_ID@'$(Build.BuildId)'@g' nginx-sample/create-deployment.json
          sed -i 's@CODE_DEPLOY_APPLICATION_NAME@'$(AWS_CODE_DEPLOY_APPLICATION_NAME)'@g' nginx-sample/create-deployment.json 
          sed -i 's@CODE_DEPLOY_GROUP_NAME@'$(AWS_CODE_DEPLOY_GROUP_NAME)'@g' nginx-sample/create-deployment.json
          sed -i 's@ARTIFACT_BUCKET@'$(AWS_ARTIFACT_BUCKET_NAME)'@g' nginx-sample/create-deployment.json  

          cat nginx-sample/appspec.yaml
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_REGION)
    - task: S3Upload@1
      displayName: Upload AppSpec
      inputs:
        awsCredentials: 'AWS'
        regionName: $(AWS_REGION)
        bucketName: $(AWS_ARTIFACT_BUCKET_NAME)
        targetFolder: $(Build.BuildId)
        sourceFolder: 'nginx-sample'
        globExpressions: 'appspec.yaml'
    - task: Bash@3
      displayName: Deploy
      inputs:
        targetType: inline
        script: |
          # Invoke CodeDeploy
          export CREATE_DEPLOYMENT_OUTPUT=$(aws deploy create-deployment --cli-input-json file://nginx-sample/create-deployment.json )
          export DEPLOYMENT_ID=$(echo $CREATE_DEPLOYMENT_OUTPUT | jq -r '.deploymentId')
          echo 'Deployment Id: ' $DEPLOYMENT_ID
          
          DURATION_IN_SECONDS=1200 #20 Minutes                         
          ENDTIME=$(( $(date +%s) + $DURATION_IN_SECONDS ))
          SLEEP_INTERVAL="30s"

          echo "Timeout Duration: $DURATION_IN_SECONDS"
          echo "Sleep Interval between checks: $SLEEP_INTERVAL"
          echo ""

          # Available status : Created | Queued | InProgress | Baking | Succeeded | Failed | Stopped | Ready

          DEPLOYMENT_SUCCESS="false"

          while [ $(date +%s) -lt $ENDTIME ]; do
            GET_DEPLOYMENT_OUTPUT=$(aws deploy get-deployment \
              --deployment-id  $DEPLOYMENT_ID)

            DEPLOYMENT_STATUS=$(echo $GET_DEPLOYMENT_OUTPUT | jq '.status')

            if [[ $DEPLOYMENT_STATUS = 'Succeeded' ]]; then
              DEPLOYMENT_SUCCESS="true"
              echo "Deployment Completed."
              break
            elif [[ $DEPLOYMENT_STATUS = 'Failed' || $DEPLOYMENT_STATUS = 'Stopped' ]]; then
              echo "Deployment " $DEPLOYMENT_STATUS
              break
            else
              echo "Deployment Status: $DEPLOYMENT_STATUS"
            fi

            sleep $SLEEP_INTERVAL
          done

          if [[ $DEPLOYMENT_SUCCESS = "false" ]]; then
            echo "ERROR:  Deployment Failed . Please check CodeDeploy Console"
            exit 1
          fi
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(AWS_REGION)



      
        

      
